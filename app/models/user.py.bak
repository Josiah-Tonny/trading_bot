from typing import (
    Optional, List, Dict, Any, Type, TypeVar, Union, Sequence, 
    overload, cast, NoReturn, Iterator, AsyncIterator, Protocol,
    Callable, TypedDict, Literal
)
from datetime import datetime, timezone, timedelta
import enum
import logging
from types import TracebackType

# SQLAlchemy imports
from sqlalchemy.orm import (
    Mapped, mapped_column, relationship, DeclarativeBase,
    Session as SQLASession, class_mapper
)
from sqlalchemy.engine.result import Result, ScalarResult
from sqlalchemy.sql import select
from sqlalchemy.sql.elements import BinaryExpression, ClauseElement
from sqlalchemy import (
    String, Integer, Boolean, DateTime, Float, 
    ForeignKey, Enum, BigInteger, create_engine,
    inspect
)
from sqlalchemy.orm.attributes import set_attribute
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm.session import SessionTransaction
from sqlalchemy.orm.collections import InstrumentedList

# Custom type definitions
class FeatureSet(TypedDict, total=False):
    """TypedDict for subscription features"""
    sentiment_analysis: bool
    basic_signals: bool
    advanced_signals: Optional[bool]
    risk_analysis: bool
    portfolio_optimization: bool
    custom_strategy: Optional[bool]

class TelegramData(TypedDict, total=True):
    """TypedDict for telegram user data"""
    telegram_user_id: int
    username: Optional[str]
    first_name: Optional[str]
    last_name: Optional[str]

class ResultDict(TypedDict, total=True):
    """TypedDict for API responses"""
    success: bool
    error: Optional[str]
    data: Optional[Dict[str, Any]]

# Type variables for generic types
# Type variables for generic types
T = TypeVar('T')
M = TypeVar('M', bound='Base')
ModelT = TypeVar('ModelT', bound='Base', covariant=True)
UserType = TypeVar('UserType', bound='User', covariant=True)
SubType = TypeVar('SubType', bound='Subscription', covariant=True)

class AsyncDatabase(Protocol):
    """Protocol for async database operations"""
    async def execute(self, statement: ClauseElement) -> Result[Any]: ...
    async def scalar(self, statement: ClauseElement) -> Any: ...
    async def scalars(self, statement: ClauseElement) -> ScalarResult[Any]: ...
    async def commit(self) -> None: ...
    async def rollback(self) -> None: ...
    async def close(self) -> None: ...
    async def refresh(self, instance: 'Base') -> None: ...
    def add(self, instance: 'Base') -> None: ...
    def delete(self, instance: 'Base') -> None: ...
    async def flush(self, objects: Optional[Sequence[Any]] = None) -> None: ...
    
    @property
    def is_active(self) -> bool: ...
    
    async def begin(self) -> 'AsyncSessionTransaction': ...
    
class AsyncSessionTransaction(Protocol):
    """Protocol for async database transactions"""
    async def __aenter__(self) -> AsyncDatabase: ...
    async def __aexit__(
        self,
        exc_type: Optional[Type[BaseException]],
        exc_val: Optional[BaseException],
        exc_tb: Optional[TracebackType]
    ) -> None: ...
    
class AsyncModel(Protocol[ModelT]):
    """Protocol for async model operations"""
    @classmethod
    async def get_by_id(cls: Type[ModelT], session: AsyncDatabase, id: int) -> Optional[ModelT]: ...
    
    @classmethod
    async def create(cls: Type[ModelT], session: AsyncDatabase, **kwargs: Any) -> ModelT: ...
    
    async def update(self: ModelT, session: AsyncDatabase, **kwargs: Any) -> None: ...
    async def delete(self: ModelT, session: AsyncDatabase) -> None: ...
    def to_dict(self) -> Dict[str, Any]: ...

logger = logging.getLogger(__name__)

class ModelBase(Protocol[M]):
    """Base protocol for database models"""
    id: int
    
    @classmethod
    async def get_by_id(cls: Type[M], session: AsyncDatabase, id: int) -> Optional[M]: ...
    
    @classmethod
    async def create(cls: Type[M], session: AsyncDatabase, **kwargs: Any) -> M: ...
    
    async def update(self: M, session: AsyncDatabase, **kwargs: Any) -> None: ...
    async def delete(self: M, session: AsyncDatabase) -> None: ...
    def to_dict(self) -> Dict[str, Any]: ...

from typing import TypeVar, Generic, Type, Dict, Any, Optional, Protocol, runtime_checkable, cast, Union
from datetime import datetime, timezone
import re
import enum
from sqlalchemy import DateTime, Integer, select, String, Boolean, ForeignKey, Enum
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.inspection import inspect
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, relationship
from sqlalchemy.engine import Result
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.sql import Select

@runtime_checkable
class HasId(Protocol):
    """Protocol for objects that have an ID"""
    id: int

# Define a type variable for database operations
DBFunc = TypeVar('DBFunc')

class Base(DeclarativeBase):
    """Enhanced base class with common model functionality"""
    
    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    created_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True), 
        default=lambda: datetime.now(timezone.utc)
    )
    updated_at: Mapped[Optional[datetime]] = mapped_column(
        DateTime(timezone=True),
        onupdate=lambda: datetime.now(timezone.utc),
        nullable=True
    )

    def to_dict(self) -> Dict[str, Any]:
        """Convert model to dictionary"""
        return {
            column.key: getattr(self, column.key)
            for column in inspect(self.__class__).columns
            if hasattr(self, column.key)
        }

class AsyncModelMixin(Generic[DBFunc]):
    """Mixin class for async model operations"""
    
    # Class method for retrieving instance by ID
    @classmethod
    async def get_by_id(
        cls, 
        session: AsyncSession, 
        id: int
    ) -> Optional[DBFunc]:
        """Get model instance by ID"""
        stmt = select(cls).where(getattr(cls, 'id') == id)
        result = await session.scalar(stmt)
        return cast(Optional[DBFunc], result)
    
    # Class method for creating a new instance
    @classmethod
    async def create(
        cls,
        session: AsyncSession, 
        **kwargs: Any
    ) -> DBFunc:
        """Create new model instance"""
        instance = cls(**kwargs)
        session.add(instance)
        await session.flush()
        return cast(DBFunc, instance)
    
    # Instance method for updating attributes
    async def update(
        self,
        session: AsyncSession, 
        **kwargs: Any
    ) -> None:
        """Update model attributes"""
        for key, value in kwargs.items():
            if hasattr(self, key):
                setattr(self, key, value)
        await session.flush()
    
    # Instance method for deleting the instance
    async def delete(
        self,
        session: AsyncSession
    ) -> None:
        """Delete model instance"""
        await session.delete(self)
        await session.flush()

class SubscriptionTier(str, enum.Enum):
    """Subscription tier enumeration"""
    FREE = "free"
    PRO = "pro"
    PREMIUM = "premium"
    
    @property
    def features(self) -> FeatureSet:
        return TIER_FEATURES[self]

# Define feature types for better type safety
class FeatureSet(TypedDict, total=False):
    sentiment_analysis: bool
    basic_signals: bool
    advanced_signals: Optional[bool]
    risk_analysis: bool
    portfolio_optimization: bool
    custom_strategy: Optional[bool]

TIER_FEATURES: Dict[SubscriptionTier, FeatureSet] = {
    SubscriptionTier.FREE: {
        'sentiment_analysis': True,
        'basic_signals': True,
        'advanced_signals': None,
        'risk_analysis': False,
        'portfolio_optimization': False,
        'custom_strategy': None
    },
    SubscriptionTier.PRO: {
        'sentiment_analysis': True,
        'basic_signals': True,
        'advanced_signals': True,
        'risk_analysis': True,
        'portfolio_optimization': False,
        'custom_strategy': None
    },
    SubscriptionTier.PREMIUM: {
        'sentiment_analysis': True,
        'basic_signals': True,
        'advanced_signals': True,
        'risk_analysis': True,
        'portfolio_optimization': True,
        'custom_strategy': True
    }
}

class User(Base):
    """User model with full type hints"""
    __tablename__ = 'users'
    
    # Basic user information
    username: Mapped[str] = mapped_column(String(50), unique=True, index=True)
    email: Mapped[str] = mapped_column(String(100), unique=True, index=True)
    password_hash: Mapped[str] = mapped_column(String(64))
    is_active: Mapped[bool] = mapped_column(Boolean, default=True)
    
    # Trading related fields
    risk_tolerance: Mapped[float] = mapped_column(
        Float, 
        default=0.5,
        comment="User's risk tolerance score (0-1)"
    )
    active_symbol: Mapped[Optional[str]] = mapped_column(
        String(20),
        comment="Currently active trading symbol"
    )
    
    # Optional telegram integration
    telegram_id: Mapped[Optional[int]] = mapped_column(BigInteger, unique=True, nullable=True)
    telegram_username: Mapped[Optional[str]] = mapped_column(String(100), nullable=True)
    
    # Relationships
    subscription: Mapped[Optional['Subscription']] = relationship(
        'Subscription',
        back_populates='user',
        uselist=False,
        lazy='joined'
    )

    def __repr__(self) -> str:
        return f"<User {self.username}>"
    
    @property
    def is_premium(self) -> bool:
        """Check if user has premium subscription"""
        return bool(
            self.subscription and 
            self.subscription.tier == SubscriptionTier.PREMIUM and
            self.subscription.is_active
        )
        
    @classmethod
    async def get_by_telegram_id(
        cls: Type['User'], 
        session: AsyncSession, 
        telegram_id: int
    ) -> Optional['User']:
        """Get user by telegram ID"""
        stmt = select(cls).filter(cls.telegram_id == telegram_id)
        result = await session.execute(stmt)
        user = await result.scalar_one_or_none()
        return user
        
    @classmethod
    async def create_from_telegram(
        cls: Type['User'], 
        session: AsyncSession, 
        data: TelegramData
    ) -> 'User':
        """Create a new user from telegram data"""
        user = cls(
            telegram_id=data['telegram_user_id'],
            telegram_username=data['username'],
            username=f"tg_{data['telegram_user_id']}",
            is_active=True
        )
        session.add(user)
        await session.flush()
        return user

class Subscription(Base):
    """Subscription model with full type hints"""
    __tablename__ = 'subscriptions'
    
    # Foreign key relationship
    user_id: Mapped[int] = mapped_column(ForeignKey('users.id'))
    
    # Subscription details
    tier: Mapped[SubscriptionTier] = mapped_column(
        Enum(SubscriptionTier),
        default=SubscriptionTier.FREE
    )
    is_active: Mapped[bool] = mapped_column(Boolean, default=True)
    
    # Timestamps
    start_date: Mapped[datetime] = mapped_column(
        DateTime(timezone=True),
        default=lambda: datetime.now(timezone.utc)
    )
    end_date: Mapped[Optional[datetime]] = mapped_column(DateTime(timezone=True))
    
    # Usage tracking
    signal_credits: Mapped[int] = mapped_column(Integer, default=0)
    last_ai_request: Mapped[Optional[datetime]] = mapped_column(DateTime(timezone=True))
    ai_requests_count: Mapped[int] = mapped_column(Integer, default=0)
    ai_consultation_enabled: Mapped[bool] = mapped_column(Boolean, default=False)
    
    # Relationships
    user: Mapped[User] = relationship('User', back_populates='subscription')
    
    def __repr__(self) -> str:
        return f"<Subscription(user_id={self.user_id}, tier={self.tier})>"

    @property
    def is_expired(self) -> bool:
        """Check if subscription has expired"""
        if not self.end_date:
            return False
        return datetime.now(timezone.utc) > self.end_date

    @property
    def features(self) -> FeatureSet:
        """Get features for current tier"""
        return TIER_FEATURES[self.tier]

class User(Base):
    """User model class with type hints"""
    __tablename__ = 'users'
    
    id: Mapped[int] = mapped_column(Integer, primary_key=True, index=True)
    username: Mapped[str] = mapped_column(String(50), unique=True, index=True)
    email: Mapped[str] = mapped_column(String(100), unique=True, index=True)
    password_hash: Mapped[str] = mapped_column(String(64))
    is_active: Mapped[bool] = mapped_column(Boolean, default=True)
    created_at: Mapped[datetime] = mapped_column(DateTime, default=lambda: datetime.now(timezone.utc))
    risk_tolerance: Mapped[float] = mapped_column(Float, default=0.5)  # Scale 0-1, default moderate
    active_symbol: Mapped[Optional[str]] = mapped_column(String(20))
    
    # Telegram-related fields
    telegram_user_id: Mapped[Optional[int]] = mapped_column(BigInteger, unique=True, index=True)
    telegram_username: Mapped[Optional[str]] = mapped_column(String(100))
    first_name: Mapped[Optional[str]] = mapped_column(String(100))
    last_name: Mapped[Optional[str]] = mapped_column(String(100))
    
    # Relationships
    subscription: Mapped[Optional["Subscription"]] = relationship(
        "Subscription", 
        back_populates="user", 
        uselist=False
    )
    
    def __repr__(self) -> str:
        return f"<User {self.username}>"

class Subscription(Base):
    """Subscription model class with type hints"""
    __tablename__ = 'subscriptions'
    
    id: Mapped[int] = mapped_column(Integer, primary_key=True, index=True)
    user_id: Mapped[int] = mapped_column(ForeignKey("users.id"))
    tier: Mapped[SubscriptionTier] = mapped_column(Enum(SubscriptionTier), default=SubscriptionTier.FREE)
    is_active: Mapped[bool] = mapped_column(Boolean, default=True)
    start_date: Mapped[datetime] = mapped_column(DateTime, default=lambda: datetime.now(timezone.utc))
    end_date: Mapped[Optional[datetime]] = mapped_column(DateTime)
    signal_credits: Mapped[int] = mapped_column(Integer, default=0)
    last_ai_request: Mapped[Optional[datetime]] = mapped_column(DateTime)
    ai_requests_count: Mapped[int] = mapped_column(Integer, default=0)
    ai_consultation_enabled: Mapped[bool] = mapped_column(Boolean, default=False)
    
    # Relationships
    user: Mapped[User] = relationship("User", back_populates="subscription")
    
    def __repr__(self) -> str:
        return f"<Subscription(user_id={self.user_id}, tier={self.tier})>"

class UserDBService:
    """Database service for User model operations with proper type hints"""
    
    def __init__(self, db: AsyncSession) -> None:
        self._db = db
    
    async def get_user_by_id(self, user_id: int) -> Optional[User]:
        """Get user by ID with type-safe query"""
        result = await self._db.get(User, user_id)
        return result
    
    async def get_user_by_email(self, email: str) -> Optional[User]:
        """Get user by email with type-safe query"""
        stmt = select(User).where(User.email == email.lower())
        result = await self._db.execute(stmt)
        return result.scalar_one_or_none()
    
    async def get_user_by_telegram_id(self, telegram_id: int) -> Optional[User]:
        """Get user by Telegram ID with type-safe query"""
        stmt = select(User).where(User.telegram_id == telegram_id)
        result = await self._db.execute(stmt)
        return result.scalar_one_or_none()
        
    async def create_user(
        self,
        username: str,
        email: str,
        password_hash: str,
        telegram_id: Optional[int] = None,
        first_name: Optional[str] = None,
        last_name: Optional[str] = None,
        telegram_username: Optional[str] = None,
        risk_tolerance: float = 0.5,
        is_active: bool = True
    ) -> User:
        """Create a new user with full parameter type hints"""
        if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
            raise ValueError("Invalid email format")
        
        if not 3 <= len(username) <= 50 or not re.match(r"^[a-zA-Z0-9_-]+$", username):
            raise ValueError("Invalid username format")
        
        user = User(
            username=username,
            email=email.lower(),
            password_hash=password_hash,
            telegram_id=telegram_id,
            first_name=first_name,
            last_name=last_name,
            telegram_username=telegram_username,
            risk_tolerance=risk_tolerance,
            is_active=is_active
        )
        
        try:
            self._db.add(user)
            await self._db.commit()
            await self._db.refresh(user)
            return user
        except SQLAlchemyError as e:
            await self._db.rollback()
            raise ValueError(f"Failed to create user: {str(e)}")

    async def create_telegram_user(
        self,
        telegram_data: TelegramData
    ) -> User:
        """Create or update a user from Telegram data with type-safe operations"""
        if not telegram_data:
            raise ValueError("Telegram data cannot be empty")
        
        telegram_user_id = telegram_data['telegram_user_id']
        
        try:
            # Try to find existing user
            user = await self.get_user_by_telegram_id(telegram_user_id)
            if user is not None:
                # Update existing user's information
                updateable_fields = {
                    'first_name': telegram_data.get('first_name'),
                    'last_name': telegram_data.get('last_name'),
                    'telegram_username': telegram_data.get('username')
                }
                
                for field, value in updateable_fields.items():
                    if value is not None:
                        setattr(user, field, value)
                
                await self._db.commit()
                return user

            # Create new user
            username = telegram_data.get('username') or f"tg_{telegram_user_id}"
            user = User(
                username=username,
                telegram_id=telegram_user_id,
                first_name=telegram_data.get('first_name'),
                last_name=telegram_data.get('last_name'),
                telegram_username=telegram_data.get('username'),
                is_active=True
            )
            
            self._db.add(user)
            await self._db.commit()
            await self._db.refresh(user)
            return user
            
        except SQLAlchemyError as e:
            await self._db.rollback()
            raise ValueError(f"Database error: {str(e)}")
    
    def create_user(self, 
                   username: str, 
                   email: str, 
                   password_hash: str,
                   telegram_id: Optional[int] = None,
                   first_name: Optional[str] = None,
                   last_name: Optional[str] = None,
                   telegram_username: Optional[str] = None,
                   risk_tolerance: float = 0.5,
                   is_active: bool = True) -> User:
        """Create a new user with type-safe operations"""
        user = User(
            username=username,
            email=email.lower(),
            password_hash=password_hash,
            telegram_user_id=telegram_id,
            first_name=first_name,
            last_name=last_name,
            telegram_username=telegram_username,
            risk_tolerance=risk_tolerance,
            created_at=datetime.now(timezone.utc),
            is_active=is_active
        )
        self._db.add(user)
        self._db.commit()
        self._db.refresh(user)
        return user
        
    def create_telegram_user(self, telegram_data: Dict[str, Union[str, int, None]]) -> User:
        """Create or update a user from Telegram data with type-safe operations"""
        if not telegram_data:
            raise ValueError("Telegram data cannot be empty")
        
        telegram_user_id = cast(Optional[int], telegram_data.get('telegram_user_id'))
        if not telegram_user_id:
            raise ValueError("Telegram user ID is required")
        
        try:
            existing_user = self.get_user_by_telegram_id(telegram_user_id)
            
            if existing_user:
                # Update existing user's information with type-safe operations
                updateable_fields = {
                    'first_name': str,
                    'last_name': str,
                    'telegram_username': str
                }
                
                for field, type_cast in updateable_fields.items():
                    if value := telegram_data.get(field):
                        setattr(existing_user, field, type_cast(value))
                
                self._db.commit()
                self._db.refresh(existing_user)
                return existing_user
            
            # Create new user with a generic username if not provided
            username = cast(Optional[str], telegram_data.get('telegram_username'))
            username = username or f"user_{telegram_user_id}"
            
            # Type-safe user creation
            user = User(
                username=username,
                telegram_user_id=telegram_user_id,
                first_name=cast(Optional[str], telegram_data.get('first_name')),
                last_name=cast(Optional[str], telegram_data.get('last_name')),
                telegram_username=cast(Optional[str], telegram_data.get('telegram_username')),
                is_active=True,
                created_at=datetime.now(timezone.utc)
            )
            
            self._db.add(user)
            self._db.commit()
            self._db.refresh(user)
            return user
            
        except SQLAlchemyError as e:
            self._db.rollback()
            logger.error(f"Database error in create_telegram_user: {e}")
            raise
        return user

    def bulk_create_users(self, users: List[Dict[str, Any]]) -> List[User]:
        """Create multiple users in a single transaction"""
        created_users: List[User] = []
        try:
            for user_data in users:
                user = User(
                    username=user_data['username'],
                    email=user_data['email'].lower(),
                    password_hash=user_data['password_hash'],
                    created_at=datetime.now(timezone.utc),
                    is_active=True,
                    **{k: v for k, v in user_data.items() 
                       if k not in ('username', 'email', 'password_hash')}
                )
                self._db.add(user)
                created_users.append(user)
            self._db.commit()
            return created_users
        except SQLAlchemyError:
            self._db.rollback()
            raise
    
    def create_telegram_user(self, telegram_data: Dict[str, Any]) -> User:
        """Create or update a user from Telegram data with type-safe operations"""
        # Validate and convert telegram_user_id
        telegram_user_id: int = int(telegram_data.get('telegram_user_id', 0))
        if not telegram_user_id:
            raise ValueError("telegram_user_id is required")
            
        # Generate username and email if not provided
        username: str = str(telegram_data.get('username', f"tg_{telegram_user_id}"))
        email: str = str(telegram_data.get('email', f"{username}@telegram.user"))
        
        # Check if user exists
        existing_user = self.get_user_by_telegram_id(telegram_user_id)
        
        if existing_user:
            # Update existing user in a transaction
            try:
                update_fields: Dict[str, str] = {
                    'first_name': str(telegram_data.get('first_name', '')),
                    'last_name': str(telegram_data.get('last_name', '')),
                    'telegram_username': str(telegram_data.get('telegram_username', ''))
                }
                
                for field, value in update_fields.items():
                    if value:
                        set_attribute(existing_user, field, value)
                    
                self._db.commit()
                return existing_user
            except SQLAlchemyError:
                self._db.rollback()
                raise
        
        # Create new user with validated data
        return self.create_user(
            username=username,
            email=email,
            password_hash='',  # Telegram users don't need password
            telegram_id=telegram_user_id,
            first_name=str(telegram_data.get('first_name', '')),
            last_name=str(telegram_data.get('last_name', '')),
            telegram_username=str(telegram_data.get('telegram_username', '')),
            is_active=True,
            risk_tolerance=0.5
        )
    
    def update_user(self, user_id: int, **kwargs: Any) -> Optional[User]:
        """Update user attributes with type-safe operations"""
        user = self.get_user_by_id(user_id)
        if not user:
            return None
        
        try:
            for key, value in kwargs.items():
                if hasattr(user, key):
                    setattr(user, key, value)
            
            self._db.commit()
            self._db.refresh(user)
            return user
        except SQLAlchemyError:
            self._db.rollback()
            raise
    
    def delete_user(self, user_id: int) -> bool:
        """Delete a user with type-safe operations"""
        user = self.get_user_by_id(user_id)
        if not user:
            return False
        
        try:
            self._db.delete(user)
            self._db.commit()
            return True
        except SQLAlchemyError:
            self._db.rollback()
            return False


    def create_telegram_user(self, telegram_data: Dict) -> User:
        """
        Create or update a user from Telegram authentication data
        """
        telegram_user_id = telegram_data.get('telegram_user_id')
        
        if not telegram_user_id:
            raise ValueError("Invalid Telegram user ID")

        # Check if user already exists
        existing_user = self.get_user_by_telegram_id(telegram_user_id)
        
        if existing_user:
            # Update existing user with latest Telegram data
            existing_user.first_name = telegram_data.get('first_name') or existing_user.first_name
            existing_user.last_name = telegram_data.get('last_name') or existing_user.last_name
            existing_user.telegram_username = telegram_data.get('telegram_username') or existing_user.telegram_username
            existing_user.profile_picture = telegram_data.get('profile_picture') or existing_user.profile_picture
            existing_user.updated_at = datetime.utcnow()
            
            self.db.commit()
            self.db.refresh(existing_user)
            return existing_user

        # Create new user
        user = User(
            telegram_user_id=telegram_user_id,
            first_name=telegram_data.get('first_name', ''),
            last_name=telegram_data.get('last_name', ''),
            telegram_username=telegram_data.get('telegram_username', ''),
            username=telegram_data.get('telegram_username') or f"tg_user_{telegram_user_id}",
            profile_picture=telegram_data.get('profile_picture', ''),
            registration_method='telegram',
            is_active=True,  # Telegram users are automatically activated
            risk_tolerance='moderate'  # Default risk tolerance
        )
        
        self.db.add(user)
        self.db.commit()
        self.db.refresh(user)
        
        logger.info(f"Created new Telegram user: {user.id} (TG: {telegram_user_id})")
        return user

    def authenticate_telegram_user(self, telegram_user_id: int) -> Optional[User]:
        """
        Authenticate user by Telegram ID
        """
        return self.db.query(User).filter(
            User.telegram_user_id == telegram_user_id,
            User.is_active == True
        ).first()

    def update_user(self, user: User, **kwargs) -> User:
        for key, value in kwargs.items():
            if hasattr(user, key):
                setattr(user, key, value)
        user.updated_at = datetime.utcnow()
        self.db.commit()
        self.db.refresh(user)
        return user

    def activate_user_subscription(self, user_id: int, duration_days: int = 30) -> Optional[User]:
        user = self.get_user_by_id(user_id)
        if not user:
            return None
        
        user.is_active = True
        user.subscription_status = 'active'
        user.subscription_expiry = datetime.utcnow() + timedelta(days=duration_days)
        
        # Create subscription record
        subscription = Subscription(
            user_id=user.id,
            tier='basic',
            symbols=json.dumps(["EURUSD"]),
            timeframes=json.dumps(["1h"]),
            capital=100.0,
            end_date=user.subscription_expiry,
            payment_status='completed'
        )
        
        self.db.add(subscription)
        self.db.commit()
        self.db.refresh(user)
        return user

    def set_password_reset_token(self, email: str) -> Optional[str]:
        user = self.get_user_by_email(email)
        if not user:
            return None
        
        token = "APT" + ''.join(secrets.choice(string.ascii_uppercase + string.digits) for _ in range(6))
        user.reset_token = token
        user.reset_token_expiry = datetime.utcnow() + timedelta(hours=1)
        
        self.db.commit()
        return token

    def reset_password(self, token: str, new_password: str) -> bool:
        user = self.db.query(User).filter(
            User.reset_token == token,
            User.reset_token_expiry > datetime.utcnow()
        ).first()
        
        if user:
            user.password_hash = self._hash_password(new_password)
            user.reset_token = None
            user.reset_token_expiry = None
            self.db.commit()
            return True
        return False

    def authenticate_user(self, email: str, password: str) -> Optional[User]:
        user = self.get_user_by_email(email)
        if user and user.password_hash == self._hash_password(password):
            return user
        return None

    def _hash_password(self, password: str) -> str:
        """Hash password using SHA-256 (use bcrypt in production)"""
        return hashlib.sha256(password.encode()).hexdigest()

# Convenience functions for backward compatibility
def get_user_by_email(email: str) -> Optional[User]:
    with UserService() as service:
        return service.get_user_by_email(email)

def get_user_by_telegram_id(telegram_id: int) -> Optional[User]:
    with UserService() as service:
        return service.get_user_by_telegram_id(telegram_id)

def create_user(email: Optional[str] = None, password: Optional[str] = None, 
               telegram_id: Optional[int] = None, **kwargs) -> User:
    with UserService() as service:
        return service.create_user(email, password, telegram_id, **kwargs)

def activate_user_subscription(user_id: int, duration_days: int = 30) -> Optional[User]:
    with UserService() as service:
        return service.activate_user_subscription(user_id, duration_days)

def get_user_by_id(user_id: int) -> Optional[User]:
    with UserService() as service:
        return service.get_user_by_id(user_id)

def set_password_reset_token(email: str) -> Optional[str]:
    with UserService() as service:
        return service.set_password_reset_token(email)
    
def reset_password(token: str, new_password: str) -> bool:
    with UserService() as service:
        return service.reset_password(token, new_password)